// Generated by CoffeeScript 1.3.3
(function() {
  var ByCoffeeScript, EventEmitter, coffee, fs, minimatch, path, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  fs = require('fs');

  path = require('path');

  EventEmitter = require('events').EventEmitter;

  coffee = require('coffee-script');

  minimatch = require('minimatch');

  _ = require('underscore');

  module.exports = ByCoffeeScript = (function(_super) {

    __extends(ByCoffeeScript, _super);

    function ByCoffeeScript(opts) {
      var _ref;
      this.opts = opts != null ? opts : {};
      this.errorFiles = [];
      this.noCompileFiles = [];
      if (((_ref = this.opts) != null ? _ref.noCompile : void 0) != null) {
        this._setNoCompileFiles(this.opts.noCompile);
      }
    }

    ByCoffeeScript.prototype._setListeners = function(bystander) {
      var _this = this;
      this.bystander = bystander;
      this.bystander.on('File found', function(file, stat) {
        if (path.extname(file) === '.coffee' && !_this._isNoCompile(file)) {
          return _this.compile(file);
        }
      });
      this.bystander.on('File created', function(file, stat) {
        if (path.extname(file) === '.coffee' && !_this._isNoCompile(file)) {
          _this.emit('coffee created', file, stat);
          return _this.compile(file);
        }
      });
      this.bystander.on('File changed', function(file, stat) {
        if (path.extname(file) === '.coffee' && !_this._isNoCompile(file)) {
          _this.emit('coffee changed', file, stat);
          return _this.compile(file);
        }
      });
      return this.bystander.on('File removed', function(file, stat) {
        if (path.extname(file) === '.coffee' && !_this._isNoCompile(file)) {
          _this.errorFiles = _(_this.errorFiles).without(file);
          return _this.emit('coffee removed', file, stat);
        }
      });
    };

    ByCoffeeScript.prototype._isNoCompile = function(file) {
      var v, _i, _len, _ref;
      _ref = this.noCompileFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (minimatch(file, v, {
          dot: true
        })) {
          return true;
        }
      }
      return false;
    };

    ByCoffeeScript.prototype._setNoCompileFiles = function(newFiles) {
      return this.noCompileFiles = _(this.noCompileFiles).union(newFiles);
    };

    ByCoffeeScript.prototype.getErrorFiles = function() {
      return this.errorFiles;
    };

    ByCoffeeScript.prototype._emitCompiled = function(file, compiled, code) {
      return this.emit('compiled', {
        file: file,
        compiled: compiled,
        code: code
      });
    };

    ByCoffeeScript.prototype._getCode = function(file, cb) {
      var _this = this;
      return fs.readFile(file, 'utf8', function(err, code) {
        return cb({
          err: err,
          code: code,
          file: file
        });
      });
    };

    ByCoffeeScript.prototype.compile = function(file) {
      var _this = this;
      return this._getCode(file, function(data) {
        var compiled, message;
        if (data.err) {
          if (!_this.opts.nolog) {
            console.log('coffee file not found'.yellow + (" - " + file + "\n"));
          }
          return _this.emit('nofile', {
            file: file,
            err: data.err
          });
        } else {
          try {
            compiled = coffee.compile(data.code);
            if (!_this.opts.nolog) {
              message = ['compiled'.green, " - " + file];
              console.log(message.join('') + '\n');
            }
            return _this._emitCompiled(file, compiled, data.code);
          } catch (e) {
            if (!_this.opts.nolog) {
              console.log('compile error'.red + (" in " + file) + (" => " + e).red + '\n');
            }
            _this.errorFiles.push(file);
            _this.errorFiles = _(_this.errorFiles).uniq();
            return _this.emit('compile error', {
              file: file,
              err: e
            });
          }
        }
      });
    };

    return ByCoffeeScript;

  })(EventEmitter);

}).call(this);
